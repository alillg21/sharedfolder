/***********************************************************************************************************
 *
 * @FILENAME		: sdk_modem.h
 *
 * @AUTHOR  		: Frank Young
 *
 * @DATE	  		: 2010-4-8
 *
 * @DESCRIPTION		: 
 *
 * @COPYRIGHT		: 2009-2012 ShenZhen KAIFA Technology Co.,Ltd.
 *
 ***********************************************************************************************************/
#ifndef _SDK_MODEM_H_
#define _SDK_MODEM_H_


/************************************************************************
//函 数 名: sdk_ModemOpen
//描    述: 打开modem设备
//全局变量: 无
//输入参数: 无
//输出参数: 无
//返 回 值:
//                      0                       :成功
//                      -1                      :打开modem失败
************************************************************************/
int sdk_ModemOpen(void);

/************************************************************************
//函 数 名: sdk_ModemNorDial   
//描    述: 实现modem同步拨号
//全局变量: 无
//输入参数:
//                      sTelNo  : 电话号码(必须是以0结尾的字符串)
//输出参数: 无
//返 回 值:
//                      0x00    //拨号连接成功
//                      0x01    //拨号超时
//                      0x02    //未设电话号码
//                      0x03    //电话线路未连接好
//                      0x04    //电话线路被占用
//                      0x05    //并线电话终端摘机中
//                      0x06    //远端挂机断开
//                      0x07    //无拨号音
//                      0x08    //被叫电话忙
//                      0x09    //无应答音
//                      0x0A    //载波已丢失
//                      0x0B    //拨号失败（其他原因）
//                      -1      //modem拨号出错
//                      -2      //参数错(指针为空或者内容为空)
//说    明: 在sdk_ModemOpen之后调用该函数才会生效
************************************************************************/
int sdk_ModemNorDial(char *sTelNo );

/************************************************************************
//函 数 名: sdk_ModemPreDial( char *sTelNo )
//描    述: 预拨号函数,执行该函数会立即返回,最终拨号的结果需要通过sdk_GetModemStatus取得.
//全局变量: 无
//输入参数: sTelNo: 电话号码(必须是以0结尾的字符串)
//输出参数: 无
//返 回 值:
//                      0x00    //成功(这个成功不是指拨号连接成功,而是指可以开始与拨号了)
//                      -1      //出错
//                      -2      //参数错(指针为空或者内容为空)
//说    明: 在sdk_ModemOpen之后调用该函数才会生效
************************************************************************/
int sdk_ModemPreDial( char *sTelNo );

/************************************************************************
//函 数 名: sdk_ModemGetStatus
//描    述: 取当前modem状态
//全局变量: 无
//输入参数: 无
//输出参数: MsgId,其含义如下:
//                      0x01    //拨号超时
//                      0x02    //未设电话号码
//                      0x03    //电话线路未连接好
//                      0x04    //电话线路被占用
//                      0x05    //并线电话终端摘机中
//                      0x06    //远端挂机断开
//                      0x07    //无拨号音
//                      0x08    //被叫电话忙
//                      0x09    //无应答音
//                      0x0A    //载波已丢失
//                      0x0B    //拨号失败（其他原因）

//返    回：
//                      0            modem处于在线通讯状态
//                      1            modem空闲状态
//                      2            modem拨号中
//                      3            modem正在应答握手请求
//                      4            modem正在挂机
//                      5            modem休眠中
//                      -1           modem出错
//                      -2           参数指针为空
//
//备    注: 在下列条件成立的情况下, MsgId值才有意义:
//      1.前一个对modem操作的函数是sdk_ModemPreDial( char *sTelNo )
//      2.该函数的返回值是1和4,此时MsgId表示上次sdk_ModemPreDial的失败的原因.如果
//        对modmem的前一个操作是sdk_ModemPreDial,返回0,表示上次拨号成功,已经建立连接,
//        返回2表示拨号还在进行中,返回-1表示modem出错,不会返回-3.
//说    明: 在sdk_ModemOpen之后调用该函数才会生效
************************************************************************/
int sdk_ModemGetStatus(int *MsgId );

/************************************************************************
//函 数 名: sdk_ModemRead
//描    述: 接收modem返回数据
//全局变量: 无
//输入参数: nTimeout :通讯超时时间(sec)
//输出参数:
//                      sData:存放接收数据buf的指针
//                      nLength:存放接收到的数据长度的指针
//返 回 值:
//                      0x00    //读取数据成功
//                      -1      //modem出错
//                      -2:     //data或者length出现空指针错误
//                      -3:     //在超时时间内未读取到数据
//                      -4:     //载波丢失
//                      -5:     //通讯出错
//备    注: 该函数为阻塞函数
//说    明: 在sdk_ModemOpen之后调用该函数才会生效
************************************************************************/
int sdk_ModemRead(unsigned char * sData, int *nLength, int nTimeout );

/************************************************************************
//函 数 名: sdk_ModemWrite
//描    述:  通过modem发送数据
//全局变量: 无
//输入参数:
//                      sData    :存放要发送数据buf的指针
//                      nLength  :要发送的数据的长度
//输出参数:
//返 回 值:
//                      0x00    //发送数据成功
//                      -1      //modem出错
//                      -2:     //sData出现空指针错误
//                      -3:     //载波丢失
//                      -4:     //通讯出错
//说    明: 在sdk_ModemOpen之后调用该函数才会生效
************************************************************************/
int sdk_ModemWrite(unsigned char *sData, int nLength );


/************************************************************************
//函 数 名: sdk_ModemHook
//描    述: 取消modem拨号
//全局变量: 无
//输入参数: 无
//输出参数: 无
//返 回 值:
//                      0x00    :挂机成功
//                      -1      :挂机失败
//说    明: 在sdk_ModemOpen之后调用该函数才会生效
************************************************************************/
int sdk_ModemHook(void);

/************************************************************************
//函 数 名: sdk_ModemClose
//描    述: 关闭modem设备
//全局变量: 无
//输入参数: 无
//输出参数: 无
//返 回 值:
//                       0		:成功关闭了modem设备
//                      -1      :关闭modem失败
//说    明: 在sdk_ModemOpen之后调用该函数才会生效
************************************************************************/
int sdk_ModemClose(void);

/************************************************************************
//函 数 名: sdk_ModemReset
//描    述: modem复位
//全局变量: 无
//输入参数: 无
//输出参数: 无
//返 回 值:				0       :复位成功
//                      -1      :复位失败
//说    明: 在sdk_ModemOpen之后调用该函数才会生效
************************************************************************/
int sdk_ModemReset(void);

/************************************************************************
//函 数 名: sdk_ModemGotoSleep
//描    述: modem进入休眠状态
//全局变量: 无
//输入参数: 无
//输出参数: 无
//返 回 值:	0               - 休眠设置成功
//          -1              - 设置失败
//			-2  			- 非空闲态，无法执行
//说	明:	1) 函数返回成功，仅表示MODEM收到休眠设置指令，并接受，
//				此时并未当即休眠，而是收到指令2秒后，进入休眠
//			2) 此函数执行条件是MODEM处于空闲时，即没有拨号任务，
//				没有数据通讯时，否则，函数返回错误
************************************************************************/
int sdk_ModemGotoSleep(void);

/************************************************************************
//函 数 名: sdk_ModemWakeup
//描    述: modem唤醒
//全局变量: 无
//输入参数: 无
//输出参数: 无
//返 回 值:	0               - 唤醒成功
//          -1              - 唤醒失败
//			-2  			- 非休眠态，无法执行
//说	明:	1) 函数返回成功，表示MODEM已经唤醒，
//			2) 此函数执行条件是MODEM处于空闲时，否则，函数返回错误
************************************************************************/
int sdk_ModemWakeup(void);

/************************************************************************
//函 数 名: sdk_ModemSetSerialPort
//描    述: 设置modem通讯串口
//全局变量: 无
//输入参数: nPort:范围0~2(包含0和2),默认为0
//输出参数: 无
//返 回 值:  0-成功,
//       -1-参数超出范围
//说    明: 1)在sdk_ModemOpen之前调用该函数才会生效
//			2)KF900G型POS采用串口2---ttyS2
//			其他机型都采用串口0	---ttyS0		
************************************************************************/
int sdk_ModemSetSerialPort(int nPort);

/************************************************************************
//函 数 名: sdk_ModemSetFlowCtrlMode
//描    述: 设置modem流控模式
//全局变量: 无
//输入参数: nFlowCtrlId,取值含义如下:
//              0x00: 无流控
//              0x01: 硬流控
//              0x02: 软流控
//输出参数: 无
//返 回 值:
//      0       :成功
//      -1      :参数超出范围
//说    明: 1. 在sdk_ModemOpen之前调用该函数才会生效,默认为1
//			2. 对于KF900G2机型由于采用了三线串口，且同步数据流时不宜采用软流控；
//				故建议应用采用无流控方式
************************************************************************/
int sdk_ModemSetFlowCtrlMode(int nFlowCtrlId );

/************************************************************************
//函 数 名: sdk_ModemSetCommMode
//描    述: 获取Modem通讯模式,即同步或者异步模式
//全局变量: 无
//输入参数: nMode, 0-同步, 1-异步
//输出参数: 无
//返 回 值:
//      0       :成功
//      -1      :参数超出范围
////说    明: 在sdk_ModemOpen之前调用该函数才会生效,默认为0
************************************************************************/
int sdk_ModemSetCommMode(int nMode);

//函 数 名: sdk_ModemSetLineSpeed
//描    述: 设置modem通讯速率(同步或者异步通讯速率)
//全局变量: 无
//输入参数: nSpeedId, 取值范围和含义如下:
//          0x00  :        1200bps         (CCITT-V.22)
//          0x01  :        1200bps         (BELL212)0x02  :
//          0x02  :        2400bps         (CCITT-V.22bis)
//          0x03  :        9600bps         (CCITT-V.32)
//          0x04  :        14400bps        (CCITT-V.32bis 仅支持异步)
//          0x05  :        56000bps        (CCITT-V.92 仅支持异步)
//输出参数: 无
//返 回 值:
//      	0       :成功
//      	-1      :参数超出范围
//作    者: 杨 凌
//创建日期: 2010/07/08
//修 改 者: 
//修改日期: 
//说    明: 在sdk_ModemOpen之前调用该函数才会生效,默认为0
int sdk_ModemSetLineSpeed(int nSpeedId );


/************************************************************************
//函数名称：	sdk_ModemSetLowPowerOption
//功    能：	设置低功耗模式
//入口参数：	option	低功耗模式
//				[0x00] 空闲	0x01 普通休眠	0x02 深度休眠  	0x03 停止				
//出口参数：	无
//返    回：	成功0
//				失败-1
//注    意：	1）设置选项，同时需要确保进入低功耗时限值不为零，否则不会进入低功
//				模式
//				2）可以通过AT附加若干字符和外部振铃唤醒
////说    明: 在sdk_ModemOpen之前调用该函数才会生效,默认为0
************************************************************************/
int sdk_ModemSetLowPowerOption(int option);

/************************************************************************
//函数名称：	sdk_ModemSetLowPowerEnterTime
//功    能：	设置modem进入低功耗的时限（无AT指令和电话线路状态变化影响下）
//入口参数：	nSec	进入低功耗需秒数
//				取值范围：0-255			默认值：[0]		单位：秒	
//				当设定为0时，modem不会进入低功耗模式，无论模式是否设置休眠
//出口参数：	无
//返    回：	成功0
//				失败-1
////说    明: 在sdk_ModemOpen之前调用该函数才会生效,默认为0
************************************************************************/
int sdk_ModemSetLowPowerEnterTime(int nSec);

/************************************************************************
/函数名称：		sdk_ModemSetDebugOption(int opt)
/功    能：	 	设置modem调试信息输出开关选项
/入口参数：		opt	- 信息输出开关选项
				0 ： 关闭调试输出
				1 ： 开启调试输出
				默认值：[0]关闭
/出口参数：		无
//返    回：	成功0
//				失败-1
/修改日期：		2012-2-16 15:14
//说    明: 在sdk_ModemOpen之前调用该函数才会生效,默认0
*************************************************************************/
int sdk_ModemSetDebugOption(int opt);

/************************************************************************
//函 数 名: sdk_ModemGetVersion
//描    述: 取modem共享库版本号
//全局变量: 无
//输入参数: 无
//输出参数: sVersion:版本号(以'\0'结尾的字符串)
//返 回 值:
//      0       :成功
//      -1      :参数为NULL
************************************************************************/
int sdk_ModemGetVersion(char *sVersion );

#endif




